{
  "name": "GitHub Tutorial",
  "tagline": "Git puns aren't funny ",
  "body": "# GitHub Tutorial\r\n\r\n_by Kathleen Dawn Saloma_\r\n\r\n---\r\n## Git vs. GitHub\r\n\r\nY'know why Git and Github are great? Because you could get a glass of  \r\nmilk, someone could break your computer with a hammer in hopes of ruining  \r\nyour hopes and dreams while your not looking, and then you can be like  \r\n\"Sike, I saved my code.\"\r\n\r\nWhat I'm saying is, Git and Github are important for saving code. You'll  \r\nget it once you read this entire tutorial/guide.\r\n\r\n**Git:**\r\n*  Takes \"screenshots\" of the code\r\n    *   Does _not_ require GitHub\r\n\r\nGit is a program that is used to take \"screenshots\" of a Git   \r\ndirectory (or code in the staging area) permanently for the programer.  \r\nIn other words, you like photography? Good, that's what it's like.\r\n\r\n**GitHub:**\r\n*  Stores information in a \"cloud\" \r\n    * (_ex.: The website [c9.io](https://c9.io)_)\r\n    * _Does_ indeed require Git\r\n    * This is great for storing code, instead of typing large amounts  \r\n      of code only to lose it by accidently deleting it.\r\n\r\nGithub is a program that actually does save the code in a \"cloud\" for the programer ([Cloud9](https://c9.io)\r\nbeing one of many \"clouds\"). This is great for someone who has tons of code, yet they want to make sure that  \r\nthey never have to worry about losing said code. Horray for being effiencent!\r\n\r\n---\r\n## Initial Setup\r\nFor the initial setup, it's a very easy  \r\nsetup. First make a workspace:\r\n\r\n`mkdir workspace`\r\n\r\n(Tip: Make sure to use `git init` to initialize the  \r\ncode for version control.)\r\n\r\nThen you want to make a new folder within the folder,  \r\ntype:\r\n\r\n\r\n`mkdir yourfilenamehere`\r\n\r\nThis will make a new folder in your workspace area. You  \r\nmay make as many folders as you please. This is faster,  \r\nyet more complex way of making files. After you are done  \r\nmaking the folders you want type a file in your folder  \r\n(**NOTE: \"cd\" INTO THE FOLDER YOU WANT BEFORE MAKING A NEW  \r\nFILE!!!**):\r\n\r\n`touch filename.md`\r\n\r\nYou may type into the the file as much stuff as possible. Then you  \r\nwant to use `git add .` to commit the file. After all is said and done,  \r\nyou may finally start putting the code into the repository...\r\n\r\n---\r\n## Repository Setup\r\n\r\nThe Repository Setup is used to actually save the code  \r\nin a cloud to prevent typing an entire page of code  \r\nagain. Almost all coders use GitHub to save their  \r\nprogress on a project.\r\n\r\nTo do this, first the person needs to make a \"new repository\"  \r\nin their GitHub account. This is where the code will be saved.  \r\n\r\nNext, there will be a url in the green button that says \"Clone or   \r\nDownload.\" Click on the button and copy the url in the code. There  \r\nwill be two things to type:  \r\n\r\n`git add remote origin URL`\r\n\r\n(Tip: Make sure to use `git add .`)\r\n\r\nAfter that, you want to push in the code,    \r\nwhich you will use:\r\n\r\n`git push`\r\n\r\nAfter that, the code will be saved on a cloud. The coder can keep editing the files in the  \r\ncode, and can keep using `git push` to keep saving the changes. Furthermore, this is helpful  \r\nif the person's computer breaks, burn, etc. This is how GitHub can and continues to be  \r\nhelpful.\r\n\r\n---\r\n## Workflow & Commands\r\n**`git status`:** shows the progress of  \r\nyour code\r\n* **!!!VERY IMPORTANT!!!**\r\n\r\n**`git init`:**\r\ninitializes git in directory for version control\r\n\r\n**`git add . `:** Adds files to the current directory\r\n\r\n**`rm -rf .git`:** removes initalized code\r\n\r\n**`cd`:** moves you to a folder\r\n\r\n**`cd ..`:** moves you up a folder\r\n\r\n**`ls`:** shows content in a directory\r\n\r\n**`mkdir` and `rmdir`:** makes and removes directories\r\n\r\n**`touch filename.md`:** makes a file\r\n\r\n**Git used to remembering these (laugh I'm hilarious).** \r\n\r\n---\r\n## Common Errors\r\n\r\nThere are many errors you can make while  \r\ncoding, and that's perfectly fine as long  \r\nas you, the coder, are learning from your  \r\nmistakes. Many examples include:\r\n\r\n**Git Log:** Probably one of the most common error a  \r\ncoder has to go through, the solution here is  \r\nsimple! All you have to to is exit by pressing `q`.  \r\nYeah!\r\n\r\n**Forgetting to use `cd`:** In this situation, you  \r\ncould be making a file, but you wonder why the file is  \r\noutside of the intented folder. You forgot to `cd`  \r\ninto the folder before they made a new `touch` file.\r\n\r\n**Misspellings and Mistakes:** So your coding your file, and  \r\nyour ready to save, only to find that your not in your workspace  \r\nanymore. What happened? Well, it could've been that you accidently  \r\ntyped `stauts` instead of `status`, or you forgot to put a quotation  \r\nmark at the end of your commit message. Don't panic though, you can always  \r\nsimply `cd` back into the directory and carfully type that code again.\r\n\r\n**COMMIT, COMMIT, COMMIT!:** Your save your code with `git push`, and  \r\nyou expect to see the fruits of your labor on GitHub. However, you  \r\nend up seeing that nothing changed! Now now, don't freak out, the world  \r\nisn't ending anytime soon. You just forgot to make a **commit** message to your  \r\nsave. That's normal. Even I forget sometimes.\r\n\r\n**Add:** _Nooo...I'm not typing this because **I** forgot to do this..._  \r\n_T-totally not!_ I'm just saying, if you ever plan to make a commit message  \r\nto your code, make sure it's initalized with `git add .` first. Just a bit  \r\nof advice...\r\n\r\n\r\n\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}